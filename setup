#!/usr/bin/env python

import argparse
import shutil
import os
import sys

DOTFILES = [
    '.bash_aliases',
    '.bash_logout',
    '.bash_profile',
    '.bash_prompt',
    '.bashrc',
    '.ctags',
    '.editorconfig',
    '.editrc',
    '.exports',
    '.fzf.bash',
    '.gitconfig',
    '.gitignore_global',
    '.inputrc',
    '.misc',
    '.my.cnf',
    '.myclirc',
    '.notags',
    '.path',
    '.selected_editor',
    '.tmux.conf',
    '.vimrc',
]

SCRIPTPATH = '{0}/dotfiles/'.format(os.path.dirname(os.path.abspath(__file__)))
HOMEPATH = os.path.expanduser('~')

def file_exists(file):
    """Check if given path exists and is a file."""
    return os.path.exists(file) and os.path.isfile(file)


def dir_exists(directory):
    """Check if given path exists and is a directory."""
    return os.path.exists(directory) and os.path.isdir(directory)


def dotfile_path(file):
    """Generate full absolute path to dotfile."""
    return '{0}/{1}'.format(HOMEPATH, file)


def git_path(file):
    """Generate full absolute path to dotfile in git."""
    return SCRIPTPATH + file


def copy_file(dst, src):
    """Copy file from src to destination if available."""
    if not file_exists(src):
        return False

    os.makedirs(os.path.dirname(dst), exist_ok=True)
    os.makedirs(os.path.dirname(src), exist_ok=True)
    shutil.copy(src, dst)
    shutil.copystat(src, dst)

    return True


def import_dotfiles():
    """Import dotfiles into git's workspace."""
    for file in DOTFILES:
        abs_src_file = dotfile_path(file)
        abs_dst_file = git_path(file)

        if copy_file(abs_dst_file, abs_src_file):
            print('imported file', abs_src_file)
        else:
            sys.stderr.write(f'unknown file: {abs_src_file}')


def export_dotfiles():
    """Export from git."""
    for file in DOTFILES:
        abs_src_file = git_path(file)
        abs_dst_file = dotfile_path(file)

        if copy_file(abs_dst_file, abs_src_file):
            print('exported dotfile', abs_src_file)
        else:
            sys.stderr.write(f'skipped exporting dotfile {abs_src_file}')


def main():
    """Run main function"""
    parser = argparse.ArgumentParser(description='Manage dotfiles')
    parser.add_argument(
        'action',
        choices=['import', 'export'],
        help='dotfile action (either "import" or "export")',
    )
    args = parser.parse_args()

    if args.action == 'import':
            import_dotfiles()
            return

    export_dotfiles()


main()
